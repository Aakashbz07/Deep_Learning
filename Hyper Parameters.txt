import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from scikeras.wrappers import KerasClassifier
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler

# Load sample dataset
data = load_breast_cancer()
X = data.data
y = data.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the dataset
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Function to create model, required for KerasClassifier
def create_model(optimizer='adam', activation='relu', dropout_rate=0.0, neurons=16):
    model = Sequential()
    model.add(Dense(neurons, input_dim=X_train.shape[1], activation=activation))
    model.add(Dropout(dropout_rate))
    model.add(Dense(1, activation='sigmoid'))
    
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Wrap the model using KerasClassifier
model = KerasClassifier(
    model=create_model,
    optimizer='adam', 
    activation='relu', 
    dropout_rate=0.0, 
    neurons=16,
    verbose=0
)

# Define the grid of hyperparameters
param_grid = {
    'model__optimizer': ['SGD', 'Adam'],
    'model__activation': ['relu', 'tanh'],
    'model__dropout_rate': [0.0, 0.1, 0.2],
    'model__neurons': [16, 32, 64],
    'batch_size': [10, 20, 40],
    'epochs': [10, 20, 40]
}

# Create GridSearchCV object
grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, verbose=2, n_jobs=-1)

# Perform the search
grid_result = grid.fit(X_train, y_train)

# Print the best parameters and score
print(f"Best: {grid_result.best_score_} using {grid_result.best_params_}")
