Experiment - 5
import cv2
import numpy as np
import requests
from skimage import exposure
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image

# Function to download image from a URL
def download_image(url):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))
    return np.array(img)

# URL of the image from Google
image_url = 'https://images.unsplash.com/photo-1543373014-cfe4f4bc1cdf?fm=jpg&w=3000&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTl8fGhpZ2glMjByZXN8ZW58MHx8MHx8fDA%3D'  # Replace with your image URL

try:
    image = download_image(image_url)
    if image.shape[2] == 4:  # Check for images with alpha channel
        image = cv2.cvtColor(image, cv2.COLOR_BGRA2BGR)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Compute the Fourier Transform of the image
    f_transform = np.fft.fft2(gray_image)
    f_transform_shifted = np.fft.fftshift(f_transform)
    magnitude_spectrum = 20 * np.log(np.abs(f_transform_shifted))

    # High-pass filter
    rows, cols = gray_image.shape
    crow, ccol = rows // 2 , cols // 2

    high_pass = np.copy(f_transform_shifted)
    high_pass[crow-30:crow+30, ccol-30:ccol+30] = 0
    f_ishift_high = np.fft.ifftshift(high_pass)
    img_back_high = np.fft.ifft2(f_ishift_high)
    img_back_high = np.abs(img_back_high)

    # Low-pass filter
    mask = np.zeros((rows, cols), np.uint8)
    mask[crow-30:crow+30, ccol-30:ccol+30] = 1
    low_pass = f_transform_shifted * mask
    f_ishift_low = np.fft.ifftshift(low_pass)
    img_back_low = np.fft.ifft2(f_ishift_low)
    img_back_low = np.abs(img_back_low)

    # Display the original image, magnitude spectrum, high-pass filter result, and low-pass filter result
    fig, ax = plt.subplots(1, 4, figsize=(20, 10))

    ax[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    ax[0].set_title('Original Image')
    ax[0].axis('off')

    ax[1].imshow(magnitude_spectrum, cmap='gray')
    ax[1].set_title('Fourier Transform')
    ax[1].axis('off')

    ax[2].imshow(img_back_high, cmap='gray')
    ax[2].set_title('High-Pass Filter')
    ax[2].axis('off')

    ax[3].imshow(img_back_low, cmap='gray')
    ax[3].set_title('Low-Pass Filter')
    ax[3].axis('off')

    plt.show()

except Exception as e:
    print(f"An error occurred: {e}")

