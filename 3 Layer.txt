import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalize the data
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Convert labels to one-hot encoding
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Activation

# Define the 3-layer neural network
model = Sequential([
    Flatten(input_shape=(32, 32, 3)),
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=64, validation_data=(x_test, y_test))

# Remove the output layer to use the network as a feature extractor
feature_extractor = Sequential(model.layers[:-1])

# Extract features
train_features = feature_extractor.predict(x_train)
test_features = feature_extractor.predict(x_test)

from sklearn.svm import SVC

# Standardize the features
scaler = StandardScaler()
train_features = scaler.fit_transform(train_features)
test_features = scaler.transform(test_features)

# Train the SVM
svm = SVC(kernel='linear', C=1)
svm.fit(train_features, y_train.argmax(axis=1))

# Evaluate the SVM
accuracy = svm.score(test_features, y_test.argmax(axis=1))
print(f'SVM Accuracy: {accuracy * 100:.2f}%')

