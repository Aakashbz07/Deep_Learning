
from google.colab import files
# Open file dialog to select the file
uploaded = files.upload()


###########################################################

import torch
from torchvision import models, transforms
from PIL import Image
import matplotlib.pyplot as plt
import cv2
import numpy as np

# Load a pre-trained Faster R-CNN model
model = models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()  # Set the model to evaluation mode

# Define the transformations to apply to the input image
transform = transforms.Compose([
    transforms.ToTensor(),  # Convert PIL image to PyTorch tensor
])

# Load the image
image_path = '/content/your_image.jpg'  # Replace with the path to your image
image = Image.open(image_path)

# Apply the transformations
image_tensor = transform(image).unsqueeze(0)  # Add a batch dimension


# Perform object detection
with torch.no_grad():
    predictions = model(image_tensor)


# Define the COCO class labels
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A',
    'N/A', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana',
    'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut',
    'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table', 'N/A',
    'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book', 'clock',
    'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

# Set a confidence threshold for displaying bounding boxes
confidence_threshold = 0.5

# Convert image to OpenCV format
image_np = np.array(image)

# Iterate through the detected objects
for i in range(len(predictions[0]['boxes'])):
    score = predictions[0]['scores'][i].item()
    if score >= confidence_threshold:
        box = predictions[0]['boxes'][i].numpy()
        label_idx = int(predictions[0]['labels'][i].item())
        label = COCO_INSTANCE_CATEGORY_NAMES[label_idx]

        # Draw bounding box and label on the image
        cv2.rectangle(image_np, (int(box[0]), int(box[1])), (int(box[2]), int(box[3])), (255, 0, 0), 2)
        cv2.putText(image_np, label, (int(box[0]), int(box[1] - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

# Display the image with bounding boxes
plt.figure(figsize=(12, 8))
plt.imshow(image_np)
plt.axis('off')
plt.show()

